//! # Common return types from KSQL DB
//!
//! This module attempts to build up a collection of typed responses from the KSQL-DB API.
//!
//! This is a little bit tricky as the same endpoint has different response bodies depending on
//! the `STATEMENT` or `QUERY` that was executed. This makes it trickly to concretely type the
//! API so some user input might be required to enable this _currently done by specifiying `T`
//! when calling the required method_.
//!
//! This module is always going to be a moving target to try and keep the types as up to date with
//! underlying API as much as possible. If you spot something that requires an update, or
//! alternatively are using something that doesn't have a corresponding type them please raise a
//! PR.
use serde::Deserialize;
use serde_json::Value;

use std::fmt;

mod domain;
mod statements;
mod util;

pub use domain::*;
pub use statements::*;
pub use util::*;

/// This structure contains various bits of information that are passed back from KSQL DB
/// in the event of an error _(the error is generated by KSQL DB, not the library)_.
/// This can be due to a variety of reasons such as:
///
/// - Invalid SQL
/// - An error when processing the request
/// - Malformed Data
#[derive(Clone, Debug, Deserialize)]
#[serde(rename_all(serialize = "snake_case", deserialize = "camelCase"))]
pub struct KsqlDBError {
    // Generic fields
    #[serde(rename = "@type")]
    pub response_type: String,
    pub statement_text: Option<String>,

    // Error Fields
    #[serde(rename = "error_code")] // For some reason this one field is snake-case
    pub error_code: Option<u32>,
    pub message: Option<String>,

    // Currently unsure of what is contained within this
    pub entities: Option<Vec<Value>>,
}

impl fmt::Display for KsqlDBError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(
            f,
            "Received error from KSQL DB: response type '{}', with error code [{}] and message: '{}'",
            self.response_type,
            self.error_code.unwrap_or_default(),
            self.message.clone().unwrap_or_default()
        )
    }
}
